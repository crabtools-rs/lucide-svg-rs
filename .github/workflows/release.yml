name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  plan:
    name: Plan release (cargo-dist)
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.plan.outputs.plan }}
      tag: ${{ steps.plan.outputs.tag }}
      version: ${{ steps.plan.outputs.version }}
      publish: ${{ steps.plan.outputs.publish }}
      artifacts_matrix: ${{ steps.plan.outputs.artifacts_matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist@0.20.0
      - id: plan
        run: |
          cargo dist plan --tag "$GITHUB_REF_NAME" --output-format json > plan.json
          echo "plan=$(cat plan.json)" >> "$GITHUB_OUTPUT"
          echo "tag=$GITHUB_REF_NAME" >> "$GITHUB_OUTPUT"
          echo "version=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"
          echo "publish=true" >> "$GITHUB_OUTPUT"
          ARTIFACTS=$(jq -r '.artifacts | to_entries | map({artifact: .key, platform: .value.platform})' plan.json)
          echo "artifacts_matrix=${ARTIFACTS}" >> "$GITHUB_OUTPUT"
      - name: Upload dist plan
        uses: actions/upload-artifact@v4
        with:
          name: cargo-dist-plan
          path: plan.json

  build:
    name: Build artifacts (cargo-dist)
    needs: plan
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.plan.outputs.artifacts_matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust-target }}
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist@0.20.0
      - name: Build with cargo-dist
        run: cargo dist build --artifacts ${{ matrix.artifact }} --tag "${{ needs.plan.outputs.tag }}"
      - name: Upload cargo-dist outputs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            target/distrib/**/*
            !target/distrib/**/*.json

  finalize:
    name: Sign, SBOM, packaging, and publish release
    needs: [plan, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Collate release files
        run: |
          mkdir -p dist
          find artifacts -type f -name '*' -exec cp {} dist/ \;
          echo "Files to release:"
          ls -l dist || true

      - name: Generate SBOM (CycloneDX)
        run: |
          cargo install --locked cargo-cyclonedx
          cargo cyclonedx --all --format json --output-file dist/SBOM.cdx.json

      - name: Generate checksums
        shell: bash
        run: |
          cd dist
          find . -type f ! -name "*.sha256" ! -name "*.json" -print0 | xargs -0 -I{} sh -c 'sha256sum "{}" >> CHECKSUMS.sha256'
          cat CHECKSUMS.sha256

      - name: Import GPG key (optional)
        if: secrets.GPG_PRIVATE_KEY != ''
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Sign checksums with GPG (optional)
        if: secrets.GPG_PRIVATE_KEY != ''
        run: |
          cd dist
          gpg --batch --yes --armor --detach-sign --output CHECKSUMS.sha256.asc CHECKSUMS.sha256
          ls -l CHECKSUMS.sha256.asc

      - name: Generate Homebrew formula
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ needs.plan.outputs.version }}"

          LINUX_ZIP=$(ls dist/*linux*.* 2>/dev/null | head -n1 || true)
          MAC_X86_ZIP=$(ls dist/*darwin*x86_64*.* 2>/dev/null | head -n1 || true)
          MAC_ARM_ZIP=$(ls dist/*darwin*aarch64*.* 2>/dev/null | head -n1 || true)

          sha_or_empty () { test -f "$1" && sha256sum "$1" | cut -d' ' -f1 || echo ""; }

          LINUX_SHA=$(sha_or_empty "${LINUX_ZIP:-}")
          MAC_X86_SHA=$(sha_or_empty "${MAC_X86_ZIP:-}")
          MAC_ARM_SHA=$(sha_or_empty "${MAC_ARM_ZIP:-}")

          mkdir -p outpkg/homebrew

          echo 'class LucideSvgRs < Formula' > outpkg/homebrew/lucide-svg-rs.rb
          echo '  desc "Offline Lucide icons CLI and library"' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  homepage "https://github.com/soulcorrea/lucide-svg-rs"' >> outpkg/homebrew/lucide-svg-rs.rb
          echo "  version \"${VERSION}\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo '' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  on_macos do' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '    if Hardware::CPU.arm?' >> outpkg/homebrew/lucide-svg-rs.rb
          echo "      url \"https://github.com/soulcorrea/lucide-svg-rs/releases/download/v${VERSION}/lucide-svg-rs-macos-aarch64.zip\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo "      sha256 \"${MAC_ARM_SHA}\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo '    else' >> outpkg/homebrew/lucide-svg-rs.rb
          echo "      url \"https://github.com/soulcorrea/lucide-svg-rs/releases/download/v${VERSION}/lucide-svg-rs-macos-x86_64.zip\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo "      sha256 \"${MAC_X86_SHA}\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo '    end' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  end' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  on_linux do' >> outpkg/homebrew/lucide-svg-rs.rb
          echo "    url \"https://github.com/soulcorrea/lucide-svg-rs/releases/download/v${VERSION}/lucide-svg-rs-linux-x86_64.zip\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo "    sha256 \"${LINUX_SHA}\"" >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  end' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  def install' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '    bin.install "lucide-svg-rs"' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  end' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  test do' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '    system "#{bin}/lucide-svg-rs", "list"' >> outpkg/homebrew/lucide-svg-rs.rb
          echo '  end' >> outpkg/homebrew/lucide-svg-rs.rb
          echo 'end' >> outpkg/homebrew/lucide-svg-rs.rb

      - name: Generate Scoop manifest
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ needs.plan.outputs.version }}"

          WIN_ZIP=$(ls dist/*windows*x86_64*.* 2>/dev/null | head -n1 || true)
          sha_or_empty () { test -f "$1" && sha256sum "$1" | cut -d' ' -f1 || echo ""; }
          WIN_SHA=$(sha_or_empty "${WIN_ZIP:-}")

          mkdir -p outpkg/scoop

          echo '{' > outpkg/scoop/lucide-svg-rs.json
          echo "  \"version\": \"${VERSION}\"," >> outpkg/scoop/lucide-svg-rs.json
          echo '  "description": "Offline Lucide icons CLI and library",' >> outpkg/scoop/lucide-svg-rs.json
          echo '  "homepage": "https://github.com/soulcorrea/lucide-svg-rs",' >> outpkg/scoop/lucide-svg-rs.json
          echo '  "license": "MIT OR Apache-2.0",' >> outpkg/scoop/lucide-svg-rs.json
          echo '  "architecture": {' >> outpkg/scoop/lucide-svg-rs.json
          echo '    "64bit": {' >> outpkg/scoop/lucide-svg-rs.json
          echo "      \"url\": \"https://github.com/soulcorrea/lucide-svg-rs/releases/download/v${VERSION}/lucide-svg-rs-windows-x86_64.zip\"," >> outpkg/scoop/lucide-svg-rs.json
          echo "      \"hash\": \"${WIN_SHA}\"," >> outpkg/scoop/lucide-svg-rs.json
          echo '      "bin": [ "lucide-svg-rs.exe" ]' >> outpkg/scoop/lucide-svg-rs.json
          echo '    }' >> outpkg/scoop/lucide-svg-rs.json
          echo '  }' >> outpkg/scoop/lucide-svg-rs.json
          echo '}' >> outpkg/scoop/lucide-svg-rs.json

          echo "Generated packaging files:"
          ls -l outpkg/homebrew outpkg/scoop || true

      - name: Auto-push Homebrew formula (optional)
        if: secrets.GH_PAT != '' && secrets.HOMEBREW_TAP_REPO != ''
        shell: bash
        run: |
          set -e
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone "https://${{ secrets.GH_PAT }}@github.com/${{ secrets.HOMEBREW_TAP_REPO }}.git" taprepo
          mkdir -p taprepo/Formula
          cp outpkg/homebrew/lucide-svg-rs.rb taprepo/Formula/lucide-svg-rs.rb
          cd taprepo
          git add Formula/lucide-svg-rs.rb
          git commit -m "Update lucide-svg-rs formula to ${{ needs.plan.outputs.tag }}"
          git push

      - name: Auto-push Scoop manifest (optional)
        if: secrets.GH_PAT != '' && secrets.SCOOP_BUCKET_REPO != ''
        shell: bash
        run: |
          set -e
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone "https://${{ secrets.GH_PAT }}@github.com/${{ secrets.SCOOP_BUCKET_REPO }}.git" scooprepo
          mkdir -p scooprepo/bucket
          cp outpkg/scoop/lucide-svg-rs.json scooprepo/bucket/lucide-svg-rs.json
          cd scooprepo
          git add bucket/lucide-svg-rs.json
          git commit -m "Update lucide-svg-rs manifest to ${{ needs.plan.outputs.tag }}"
          git push

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.plan.outputs.tag }}
          files: |
            dist/*
            outpkg/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
